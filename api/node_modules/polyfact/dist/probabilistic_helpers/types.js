"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.t = void 0;
const tNoDesc = __importStar(require("io-ts"));
function description(description) {
    return { ...this, _desc: description };
}
function addDescriptionToFunction(fn) {
    return (...args) => {
        const res = fn(...args);
        res.description = description;
        return res;
    };
}
function extendsT(iots) {
    const sorry = iots;
    sorry.string.description = description;
    sorry.number.description = description;
    sorry.boolean.description = description;
    sorry.null.description = description;
    sorry.keyof = addDescriptionToFunction(sorry.keyof);
    sorry.literal = addDescriptionToFunction(sorry.literal);
    sorry.union = addDescriptionToFunction(sorry.union);
    sorry.intersection = addDescriptionToFunction(sorry.intersection);
    sorry.type = addDescriptionToFunction(sorry.type);
    sorry.partial = addDescriptionToFunction(sorry.partial);
    sorry.array = addDescriptionToFunction(sorry.array);
    return sorry;
}
const t = extendsT(tNoDesc);
exports.t = t;
