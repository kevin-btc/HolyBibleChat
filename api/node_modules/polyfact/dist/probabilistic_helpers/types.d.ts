import * as tNoDesc from "io-ts";
declare function description<T extends {}>(this: T, description: string): T;
type ReplaceReturnType<T extends (...a: any) => any, TNewReturn> = (...a: Parameters<T>) => TNewReturn;
type ConstantWithDescription<T extends {}> = T & {
    description: typeof description;
};
type FunctionWithDescription<T extends (...args: any[]) => any> = ReplaceReturnType<T, ReturnType<T> & {
    description: typeof description;
}>;
type newT<T extends typeof tNoDesc> = T & {
    string: ConstantWithDescription<T["string"]>;
    number: ConstantWithDescription<T["number"]>;
    boolean: ConstantWithDescription<T["boolean"]>;
    null: ConstantWithDescription<T["null"]>;
    keyof: FunctionWithDescription<T["keyof"]>;
    literal: FunctionWithDescription<T["literal"]>;
    union: FunctionWithDescription<T["union"]>;
    intersection: FunctionWithDescription<T["intersection"]>;
    type: FunctionWithDescription<T["type"]>;
    partial: FunctionWithDescription<T["partial"]>;
    array: FunctionWithDescription<T["array"]>;
};
declare const t: newT<typeof tNoDesc>;
export { t };
