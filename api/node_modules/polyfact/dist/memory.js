"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAllMemories = exports.updateMemory = exports.createMemory = void 0;
const isomorphic_fetch_1 = __importDefault(require("isomorphic-fetch"));
const ensurePolyfactToken_1 = require("./helpers/ensurePolyfactToken");
const { POLYFACT_ENDPOINT = "https://api2.polyfact.com", POLYFACT_TOKEN = "" } = process.env;
class MemoryError extends Error {
    constructor(errorType) {
        // TODO: proper error handling once the api is up and running
        switch (errorType) {
            default:
                super("An unknown error occured");
                break;
        }
        this.errorType = errorType || "unknown_error";
    }
}
async function createMemory() {
    (0, ensurePolyfactToken_1.ensurePolyfactToken)();
    try {
        const res = await (0, isomorphic_fetch_1.default)(`${POLYFACT_ENDPOINT}/memory`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "X-Access-Token": POLYFACT_TOKEN,
            },
        }).then((res) => res.json());
        return res;
    }
    catch (e) {
        if (e instanceof Error) {
            throw new MemoryError(e.name);
        }
        throw e;
    }
}
exports.createMemory = createMemory;
async function updateMemory(id, input, maxToken = 0) {
    (0, ensurePolyfactToken_1.ensurePolyfactToken)();
    try {
        const res = await (0, isomorphic_fetch_1.default)(`${POLYFACT_ENDPOINT}/memory`, {
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "X-Access-Token": POLYFACT_TOKEN,
            },
            body: JSON.stringify({
                id,
                input,
                max_token: maxToken,
            }),
        }).then((res) => res.json());
        return res;
    }
    catch (e) {
        if (e instanceof Error) {
            throw new MemoryError(e.name);
        }
        throw e;
    }
}
exports.updateMemory = updateMemory;
async function getAllMemories() {
    (0, ensurePolyfactToken_1.ensurePolyfactToken)();
    try {
        const res = await (0, isomorphic_fetch_1.default)(`${POLYFACT_ENDPOINT}/memories`, {
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                "X-Access-Token": POLYFACT_TOKEN,
            },
        }).then((res) => res.json());
        return res;
    }
    catch (e) {
        if (e instanceof Error) {
            throw new MemoryError(e.name);
        }
        throw e;
    }
}
exports.getAllMemories = getAllMemories;
