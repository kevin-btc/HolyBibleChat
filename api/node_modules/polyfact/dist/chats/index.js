"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Chat = void 0;
const isomorphic_fetch_1 = __importDefault(require("isomorphic-fetch"));
const t = __importStar(require("io-ts"));
const ensurePolyfactToken_1 = require("../helpers/ensurePolyfactToken");
const generate_1 = require("../generate");
const { POLYFACT_ENDPOINT = "https://api2.polyfact.com", POLYFACT_TOKEN = "" } = process.env;
async function createChat() {
    (0, ensurePolyfactToken_1.ensurePolyfactToken)();
    const response = await (0, isomorphic_fetch_1.default)(`${POLYFACT_ENDPOINT}/chats`, {
        method: "POST",
        headers: {
            "X-Access-Token": POLYFACT_TOKEN,
        },
    }).then((res) => res.json());
    return response.id;
}
const Message = t.type({
    id: t.string,
    chat_id: t.string,
    is_user_message: t.boolean,
    content: t.string,
    created_at: t.string,
});
class Chat {
    constructor(options = {}) {
        this.chatId = createChat();
        this.provider = options.provider || "openai";
    }
    async sendMessageWithTokenUsage(message) {
        const chatId = await this.chatId;
        const result = await (0, generate_1.generateWithTokenUsage)(message, { chatId });
        return result;
    }
    async sendMessage(message) {
        const result = await this.sendMessageWithTokenUsage(message);
        return result.result;
    }
    async getMessages() {
        const response = await (0, isomorphic_fetch_1.default)(`${POLYFACT_ENDPOINT}/chat/${await this.chatId}/history`, {
            method: "GET",
            headers: {
                "X-Access-Token": POLYFACT_TOKEN,
            },
        }).then((res) => res.json());
        return response.filter((message) => Message.is(message));
    }
}
exports.Chat = Chat;
