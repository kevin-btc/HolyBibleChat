"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transcribe = void 0;
const isomorphic_fetch_1 = __importDefault(require("isomorphic-fetch"));
const form_data_1 = __importDefault(require("form-data"));
const t = __importStar(require("io-ts"));
const { POLYFACT_ENDPOINT = "https://api2.polyfact.com" } = process.env;
const { POLYFACT_TOKEN = "" } = process.env;
const ResultType = t.type({
    text: t.string,
});
async function transcribe(file) {
    if (!POLYFACT_TOKEN) {
        throw new Error("Please put your polyfact token in the POLYFACT_TOKEN environment variable. You can get one at https://app.polyfact.com");
    }
    const formData = new form_data_1.default();
    formData.append("file", file, {
        contentType: "audio/mp3",
        filename: "file.mp3",
    });
    const res = await (0, isomorphic_fetch_1.default)(`${POLYFACT_ENDPOINT}/transcribe`, {
        method: "POST",
        headers: {
            "X-Access-Token": POLYFACT_TOKEN,
        },
        body: formData,
    }).then((res) => res.json());
    if (ResultType.is(res)) {
        return res.text;
    }
    throw new Error(`Unexpected response from polyfact: ${JSON.stringify(res, null, 2)}`);
}
exports.transcribe = transcribe;
