"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateWithTokenUsage = exports.generate = void 0;
const isomorphic_fetch_1 = __importDefault(require("isomorphic-fetch"));
const t = __importStar(require("io-ts"));
const ensurePolyfactToken_1 = require("./helpers/ensurePolyfactToken");
const { POLYFACT_ENDPOINT = "https://api2.polyfact.com", POLYFACT_TOKEN = "" } = process.env;
class GenerationError extends Error {
    constructor(errorType) {
        switch (errorType) {
            case "llm_init_failed":
                super("The server failed to initialize its LLM.");
                break;
            case "generation_failed":
                super("The generation failed.");
                break;
            default:
                super("An unknown error occured");
                break;
        }
        this.errorType = errorType || "unknown_error";
    }
}
const ResultType = t.type({
    result: t.string,
    token_usage: t.type({
        input: t.number,
        output: t.number,
    }),
});
async function generateWithTokenUsage(task, options = {}) {
    (0, ensurePolyfactToken_1.ensurePolyfactToken)();
    const requestBody = {
        task,
        provider: options?.provider || "openai",
        memory_id: options?.memoryId || "",
        chat_id: options?.chatId || "",
    };
    const res = await (0, isomorphic_fetch_1.default)(`${POLYFACT_ENDPOINT}/generate`, {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
            "X-Access-Token": POLYFACT_TOKEN,
        },
        body: JSON.stringify(requestBody),
    }).then((res) => res.json());
    if (!ResultType.is(res)) {
        throw new GenerationError();
    }
    return { result: res.result, tokenUsage: res.token_usage };
}
exports.generateWithTokenUsage = generateWithTokenUsage;
async function generate(task, options = {}) {
    const res = await generateWithTokenUsage(task, options);
    return res.result;
}
exports.generate = generate;
